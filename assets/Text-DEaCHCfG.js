import{j as a}from"./jsx-runtime-DuyR_K1q.js";import{c as A}from"./clsx-B-dksMZM.js";import{r as x}from"./index-yUhCOHB4.js";import{f as C}from"./component-NUmYR5Q2.js";import{c as D}from"./style-BnM3_UOs.js";const y="_text_19fzl_1",B="_link_19fzl_39",b="_bold_19fzl_53",h="_body_19fzl_58",z="_xs_19fzl_58",k="_sm_19fzl_62",w="_md_19fzl_66",V="_lg_19fzl_70",q="_heading_19fzl_74",T="_xxs_19fzl_74",R="_xl_19fzl_94",j="_button_19fzl_98",N="_tag_19fzl_110",H="_narrow_19fzl_142",L="_wide_19fzl_146",M="_left_19fzl_154",O="_center_19fzl_158",W="_right_19fzl_162",I="_nowrap_19fzl_166",u={text:y,link:B,bold:b,body:h,xs:z,sm:k,md:w,lg:V,heading:q,xxs:T,xl:R,button:j,tag:N,default:"_default_19fzl_119",narrow:H,wide:L,left:M,center:O,right:W,nowrap:I};function P(n,d){const{render:e,as:l="p",size:c="md",type:f="body",leading:m="default",bold:_=!1,noWrap:p=!1,color:t,children:v,id:F,textAlign:r,...E}=n,g=t??(l==="a"||l==="button"||e!=null?"link":"main");return((o,i)=>e?x.cloneElement(e,o,i):a.jsx(l,{...o,children:i}))({ref:d,id:F,className:A(u.text,u[c],u[f],u[m],r&&u[r],_&&u.bold,p&&u.nowrap),style:D(g),...E},a.jsx(a.Fragment,{children:v}))}const s=C(P);try{s.displayName="Text",s.__docgenInfo={description:"",displayName:"Text",props:{as:{defaultValue:{value:"p"},description:`レンダリングされる要素を指定。renderとは違い、HTMLのネイティブ要素に限定
また、指定した要素に応じて対応する属性も合わせて使用可能に`,name:"as",required:!1,type:{name:"ElementType"}},render:{defaultValue:null,description:`レンダリングされる要素を変更。フレームワークのリンクコンポーネントを想定しています
指定した場合、colorがデフォルトでlinkになります`,name:"render",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},children:{defaultValue:null,description:`表示するテキスト
pやdivなどを含めないでください（文法的にNGです）`,name:"children",required:!1,type:{name:"ReactNode"}},bold:{defaultValue:null,description:"太字とする",name:"bold",required:!1,type:{name:"boolean"}},color:{defaultValue:{value:"main"},description:"文字色の抽象値",name:"color",required:!1,type:{name:"enum",value:[{value:'"link"'},{value:'"main"'},{value:'"sub"'},{value:'"disabled"'},{value:'"linkSub"'},{value:'"white"'},{value:'"black"'},{value:'"blue"'},{value:'"pink"'},{value:'"orange"'},{value:'"purple"'},{value:'"green"'},{value:'"red"'},{value:'"blackDarken"'},{value:'"blueDarken"'},{value:'"pinkDarken"'},{value:'"orangeDarken"'},{value:'"purpleDarken"'},{value:'"greenDarken"'},{value:'"redDarken"'}]}},id:{defaultValue:null,description:"HTMLのid属性",name:"id",required:!1,type:{name:"string"}},textAlign:{defaultValue:null,description:"テキストの配置。指定しない場合、親要素の配置を継承",name:"textAlign",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},noWrap:{defaultValue:null,description:"領域が狭い場合でも折り返えさない",name:"noWrap",required:!1,type:{name:"boolean"}},type:{defaultValue:{value:"body"},description:"テキストの種類",name:"type",required:!1,type:{name:"enum",value:[{value:'"body"'},{value:'"button"'},{value:'"heading"'},{value:'"tag"'}]}},size:{defaultValue:{value:"md"},description:"フォントサイズの抽象値",name:"size",required:!1,type:{name:"enum",value:[{value:'"md"'},{value:'"xxs"'},{value:'"xs"'},{value:'"sm"'},{value:'"lg"'},{value:'"xl"'}]}},leading:{defaultValue:{value:`default
default
default`},description:"行送りの抽象値（`line-height`）",name:"leading",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"narrow"'},{value:'"wide"'}]}},ref:{defaultValue:null,description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",name:"ref",required:!1,type:{name:"Ref<any> | ((((instance: HTMLParagraphElement | null) => void) | RefObject<HTMLParagraphElement>) & (((instance: any) => void) | RefObject<...>))"}}}}}catch{}export{s as T};
