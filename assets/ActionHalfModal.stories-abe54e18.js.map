{"version":3,"file":"ActionHalfModal.stories-abe54e18.js","sources":["../../src/components/ActionHalfModal/ActionHalfModal.tsx"],"sourcesContent":["'use client';\n\nimport { Dialog, Transition } from '@headlessui/react';\nimport { clsx } from 'clsx';\nimport { FC, Fragment, PropsWithChildren } from 'react';\nimport styles from './ActionHalfModal.module.css';\nimport { opacityToClassName } from '../../utils/style';\nimport { AllOrNone } from '../../utils/types';\nimport { Button } from '../Button/Button';\n\ntype Opacity = 'normal' | 'darker';\n\ntype BaseProps = {\n  /**\n   * 閉じるアクションが実行された場合のコールバック\n   */\n  onClose: () => void;\n  /**\n   * ヘッダーに表示する見出しテキスト\n   */\n  header?: string;\n  /**\n   * プライマリーアクションボタンのカラースキーム\n   */\n  primaryActionColor?: 'primary' | 'alert';\n  /**\n   * 閉じるボタンのラベル\n   * @default 閉じる\n   */\n  closeLabel?: string;\n  /**\n   * オーバーレイの透過度\n   * @default normal\n   */\n  overlayOpacity?: Opacity;\n  /**\n   * 閉じるボタンを表示するかどうか\n   * @default true\n   */\n  showClose?: boolean;\n  /**\n   * モーダルを開くかどうか\n   * @default true\n   */\n  open?: boolean;\n  /**\n   * openを無視してモーダルを開いたままにするかどうか。アニメーションライブラリとの連携で、ActionHalfModal自身が開閉に関与しない場合に使用\n   * @default false\n   */\n  isStatic?: boolean;\n  /**\n   * モーダルをフルスクリーンで表示するかどうか\n   * @default true\n   */\n  fullscreen?: boolean;\n};\n\ntype PrimaryActionProps = {\n  /**\n   * プライマリーアクションボタンが実行された場合のコールバック\n   */\n  onPrimaryAction: () => void;\n  /**\n   * プライマリーアクションボタンのラベル\n   */\n  primaryActionLabel: string;\n};\n\ntype SecondaryActionProps = {\n  /**\n   * セカンダリーアクションボタンが実行された場合のコールバック\n   */\n  onSecondaryAction: () => void;\n  /**\n   * セカンダリーアクションボタンのラベル\n   */\n  secondaryActionLabel: string;\n};\n\ntype Props = BaseProps & AllOrNone<PrimaryActionProps> & AllOrNone<SecondaryActionProps>;\n\nexport const ActionHalfModal: FC<PropsWithChildren<Props>> = ({\n  children,\n  onClose,\n  onPrimaryAction,\n  onSecondaryAction,\n  header,\n  primaryActionLabel,\n  secondaryActionLabel,\n  primaryActionColor,\n  closeLabel = '閉じる',\n  overlayOpacity = 'normal',\n  showClose = true,\n  open = true,\n  isStatic = false,\n  fullscreen = false,\n}) => {\n  const opacityClassName = opacityToClassName(overlayOpacity);\n\n  return (\n    <Transition show={open}>\n      <Dialog static={isStatic} onClose={onClose} className={clsx(styles.modal, fullscreen && styles.fullscreen)}>\n        <Transition.Child\n          as={Fragment}\n          enter={styles.overlayEnter}\n          enterFrom={styles.overlayEnterFrom}\n          enterTo={styles.overlayEnterTo}\n          leave={styles.overlayLeave}\n          leaveFrom={styles.overlayLeaveFrom}\n          leaveTo={styles.overlayLeaveTo}\n        >\n          <Dialog.Overlay className={clsx(styles.overlay, styles[opacityClassName])} />\n        </Transition.Child>\n        <Transition.Child\n          as={Fragment}\n          enter={styles.panelEnter}\n          enterFrom={styles.panelEnterFrom}\n          enterTo={styles.panelEnterTo}\n          leave={styles.panelLeave}\n          leaveFrom={styles.panelLeaveFrom}\n          leaveTo={styles.panelLeaveTo}\n        >\n          <div className={clsx(styles.modalBody, !header && styles.headerLess, fullscreen && styles.fullscreen)}>\n            {header && <Dialog.Title className={styles.header}>{header}</Dialog.Title>}\n            <div className={styles.contents}>{children}</div>\n            <div className={styles.buttonContainer}>\n              {onPrimaryAction && primaryActionLabel && (\n                <Button block onClick={onPrimaryAction} aria-label={primaryActionLabel} variant={primaryActionColor}>\n                  {primaryActionLabel}\n                </Button>\n              )}\n              {onSecondaryAction && secondaryActionLabel && (\n                <Button block variant=\"secondary\" onClick={onSecondaryAction} aria-label={secondaryActionLabel}>\n                  {secondaryActionLabel}\n                </Button>\n              )}\n              {showClose && (\n                <Button variant=\"text\" onClick={onClose} aria-label={closeLabel}>\n                  {closeLabel}\n                </Button>\n              )}\n            </div>\n          </div>\n        </Transition.Child>\n      </Dialog>\n    </Transition>\n  );\n};\n"],"names":["ActionHalfModal","children","onClose","onPrimaryAction","onSecondaryAction","header","primaryActionLabel","secondaryActionLabel","primaryActionColor","closeLabel","overlayOpacity","showClose","open","isStatic","fullscreen","opacityClassName","opacityToClassName","jsx","Transition","jsxs","Dialog","clsx","styles","Fragment","Button"],"mappings":"uvCAiFOA,EAAA,CAAA,CAAuD,SAAAC,EAC5D,QAAAC,EACA,gBAAAC,EACA,kBAAAC,EACA,OAAAC,EACA,mBAAAC,EACA,qBAAAC,EACA,mBAAAC,EACA,WAAAC,EAAA,MACa,eAAAC,EAAA,SACI,UAAAC,EAAA,GACL,KAAAC,EAAA,GACL,SAAAC,EAAA,GACI,WAAAC,EAAA,EAEb,IAAA,CACE,MAAAC,EAAAC,EAAAN,CAAA,EAEA,OAAAO,EAAAC,EAAA,CAAA,KAAAN,EAAA,SAAAO,EAAAC,EAAA,CAAA,OAAAP,EAAA,QAAAX,EAAA,UAAAmB,EAAAC,EAAA,MAAAR,GAAAQ,EAAA,UAAA,EAAA,SAAA,CAGML,EAAAC,EAAA,MAAY,CAAX,GAAAK,EAAA,SACK,MAAAD,EAAA,aACU,UAAAA,EAAA,iBACI,QAAAA,EAAA,eACF,MAAAA,EAAA,aACF,UAAAA,EAAA,iBACI,QAAAA,EAAA,eACF,SAAAL,EAAAG,EAAA,QAAA,CAAA,UAAAC,EAAAC,EAAA,QAAAA,EAAAP,CAAA,CAAA,CAAA,CAAA,CAE2D,CAAA,EAC7EE,EACAC,EAAA,MAAY,CAAX,GAAAK,EAAA,SACK,MAAAD,EAAA,WACU,UAAAA,EAAA,eACI,QAAAA,EAAA,aACF,MAAAA,EAAA,WACF,UAAAA,EAAA,eACI,QAAAA,EAAA,aACF,SAAAH,EAAA,MAAA,CAAA,UAAAE,EAAAC,EAAA,UAAA,CAAAjB,GAAAiB,EAAA,WAAAR,GAAAQ,EAAA,UAAA,EAAA,SAAA,CAGbjB,GAAAY,EAAAG,EAAA,MAAA,CAAA,UAAAE,EAAA,OAAA,SAAAjB,EAAA,EAA0DY,EAAA,MAAA,CAAA,UAAAK,EAAA,SAAA,SAAArB,EAAA,EAChBkB,EAAA,MAAA,CAAA,UAAAG,EAAA,gBAAA,SAAA,CAExCnB,GAAAG,GAAAW,EAAAO,EAAA,CAAA,MAAA,GAAA,QAAArB,EAAA,aAAAG,EAAA,QAAAE,EAAA,SAAAF,EAAA,EAGCF,GAAAG,GAAAU,EAAAO,EAAA,CAAA,MAAA,GAAA,QAAA,YAAA,QAAApB,EAAA,aAAAG,EAAA,SAAAA,EAAA,EAKAI,GAAAM,EAAAO,EAAA,CAAA,QAAA,OAAA,QAAAtB,EAAA,aAAAO,EAAA,SAAAA,CAAA,CAAA,CAKA,EAAA,CAEJ,EAAA,CACF,CAAA,CACF,CAAA,CAAA,CAAA,CAAA,CAIR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}