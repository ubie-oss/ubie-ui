{"version":3,"file":"RadioCard.stories-1e804034.js","sources":["../../src/components/RadioCard/RadioCard.tsx"],"sourcesContent":["'use client';\n\nimport { clsx } from 'clsx';\nimport { FC, forwardRef } from 'react';\nimport styles from './RadioCard.module.css';\n\ntype Props = Omit<React.InputHTMLAttributes<HTMLInputElement>, 'name' | 'value' | 'children'> & {\n  /**\n   * グループ化（排他制御）したい要素には同じ名前をつける\n   */\n  name: string;\n  /**\n   * 選択時のコールバックで渡される値\n   */\n  value: string | number;\n  /**\n   * * ラベルに表示されるテキストまたは要素\n   */\n  children: React.InputHTMLAttributes<HTMLInputElement>['children'];\n  /**\n   * 横幅を100%占有するかどうか\n   */\n  block?: boolean;\n};\n\n/**\n * アクセシビリティに配慮したラジオボタン。\n * TimeQuestionContentのような、選択した後自動で遷移しないタイプのラジオボタン（選択してもなにもおきないボタン）に使用する。\n */\nconst RadioCard: FC<Props> = forwardRef<HTMLInputElement, Props>(\n  ({ name, value, checked, children, className, block = false, ...otherProps }, ref) => {\n    return (\n      <label className={clsx(styles.label, block && styles.block, checked && styles.checked)}>\n        <input\n          type=\"radio\"\n          name={name}\n          value={value}\n          checked={checked}\n          className={clsx(className, styles.radio)}\n          {...otherProps}\n          ref={ref}\n        />\n        {children}\n      </label>\n    );\n  },\n);\n\nRadioCard.displayName = 'RadioCard';\n\nexport { RadioCard };\n"],"names":["RadioCard","forwardRef","name","value","checked","children","className","block","otherProps","ref","jsxs","clsx","styles","jsx"],"mappings":"+UA6BAA,EAAAC,EAAA,WAA6B,CAAA,CAAA,KAAAC,EAAA,MAAAC,EAAA,QAAAC,EAAA,SAAAC,EAAA,UAAAC,EAAA,MAAAC,EAAA,GAAA,GAAAC,CAAA,EAAAC,IAEzBC,EAAA,QAAA,CAAA,UAAAC,EAAAC,EAAA,MAAAL,GAAAK,EAAA,MAAAR,GAAAQ,EAAA,OAAA,EAAA,SAAA,CAEIC,EAAA,QAAC,CAAA,KAAA,QACM,KAAAX,EACL,MAAAC,EACA,QAAAC,EACA,UAAAO,EAAAL,EAAAM,EAAA,KAAA,EACuC,GAAAJ,EACnC,IAAAC,CACJ,CAAA,EACFJ,CACC,CAAA,CAAA,CAIT,EAEAL,EAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}